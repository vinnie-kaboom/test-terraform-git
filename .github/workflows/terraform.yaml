name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Initial auth with minimal secrets
    - name: 'Debug GitHub Context'
      run: |
        echo "=== GitHub Context Details ==="
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Event Name: ${{ github.event_name }}"
        echo "Event Type: ${{ github.event.type }}"
        echo "Actor: ${{ github.actor }}"
        echo "Head Ref: ${{ github.head_ref }}"
        echo "Base Ref: ${{ github.base_ref }}"
        echo "Repository Owner: ${{ github.repository_owner }}"
        echo "Repository Name: ${{ github.event.repository.name }}"
        echo "Repository Full Name: ${{ github.event.repository.full_name }}"
        echo "Default Branch: ${{ github.event.repository.default_branch }}"
        echo ""
        echo "=== Workload Identity Provider Format Check ==="
        WORKLOAD_IDENTITY_PROVIDER="${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}"
        if [[ -z "$WORKLOAD_IDENTITY_PROVIDER" ]]; then
          echo "Error: INITIAL_WORKLOAD_IDENTITY_PROVIDER secret is not set"
          exit 1
        fi
        echo "Provider Format: $WORKLOAD_IDENTITY_PROVIDER"
        if [[ "$WORKLOAD_IDENTITY_PROVIDER" =~ ^projects/[0-9]+/locations/[^/]+/workloadIdentityPools/[^/]+/providers/[^/]+$ ]]; then
          echo "✓ Provider format is correct"
        else
          echo "✗ Provider format is incorrect"
          echo "Expected format: projects/{PROJECT_NUMBER}/locations/{LOCATION}/workloadIdentityPools/{POOL_ID}/providers/{PROVIDER_ID}"
          exit 1
        fi

    - name: 'Initial Auth to GCP'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: '${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ secrets.INITIAL_SERVICE_ACCOUNT }}'
        token_format: 'access_token'
        create_credentials_file: true

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Verify Authentication'
      run: |
        echo "=== Authentication Status ==="
        gcloud auth list
        echo ""
        echo "=== Current Configuration ==="
        gcloud config list
        echo ""
        echo "=== Service Account Info ==="
        echo "Service Account: ${{ secrets.INITIAL_SERVICE_ACCOUNT }}"
        echo ""
        echo "=== Workload Identity Provider Info ==="
        WORKLOAD_IDENTITY_PROVIDER="${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}"
        PROJECT_ID="${{ steps.secrets.outputs.project_id }}"
        LOCATION="global"
        POOL_ID="github-actions-pool"
        PROVIDER_ID="github-provider"
        
        echo "Project ID: $PROJECT_ID"
        echo "Location: $LOCATION"
        echo "Pool ID: $POOL_ID"
        echo "Provider ID: $PROVIDER_ID"
        echo "Full Provider: $WORKLOAD_IDENTITY_PROVIDER"
        echo ""
        echo "=== Verifying Workload Identity Pool ==="
        if ! gcloud iam workload-identity-pools describe "$POOL_ID" \
          --project="$PROJECT_ID" \
          --location="$LOCATION" \
          --format="table(name,resourceName)"; then
          echo "Error: Failed to describe workload identity pool"
          echo "This could mean:"
          echo "1. The pool doesn't exist"
          echo "2. You don't have permission to view it"
          echo "3. The project/location/pool ID is incorrect"
          exit 1
        fi
        echo ""
        echo "=== Verifying Workload Identity Provider ==="
        if ! gcloud iam workload-identity-pools providers describe "$PROVIDER_ID" \
          --project="$PROJECT_ID" \
          --location="$LOCATION" \
          --workload-identity-pool="$POOL_ID" \
          --format="table(name,resourceName,attributeCondition)"; then
          echo "Error: Failed to describe workload identity provider"
          echo "This could mean:"
          echo "1. The provider doesn't exist"
          echo "2. You don't have permission to view it"
          echo "3. The project/location/pool/provider IDs are incorrect"
          exit 1
        fi
        echo ""
        echo "=== Verifying Service Account Permissions ==="
        if ! gcloud projects get-iam-policy "$PROJECT_ID" \
          --flatten="bindings[].members" \
          --format="table(bindings.role,bindings.members)" | grep "${{ secrets.INITIAL_SERVICE_ACCOUNT }}"; then
          echo "Warning: Service account ${{ secrets.INITIAL_SERVICE_ACCOUNT }} not found in project IAM policy"
          echo "Make sure the service account has the roles/iam.workloadIdentityUser role"
        fi

    # Fetch secrets from Secret Manager
    - name: 'Fetch GCP Secrets'
      id: secrets
      run: |
        # Function to safely get secret
        get_secret() {
          local secret_name=$1
          local secret_value
          secret_value=$(gcloud secrets versions access latest --secret="$secret_name" --project="${{ steps.secrets.outputs.project_id }}" 2>/dev/null || echo "")
          if [[ -n "$secret_value" ]]; then
            echo "$secret_value"
          else
            echo "Warning: Secret $secret_name not found or not accessible"
            echo ""
          fi
        }

        # Get secrets and set them as outputs
        WORKLOAD_IDENTITY_PROVIDER=$(get_secret "github_workload_identity_provider")
        SERVICE_ACCOUNT=$(get_secret "github_service_account")
        PROJECT_ID=$(get_secret "project_id")

        # Set outputs
        echo "workload_identity_provider=${WORKLOAD_IDENTITY_PROVIDER}" >> $GITHUB_OUTPUT
        echo "service_account=${SERVICE_ACCOUNT}" >> $GITHUB_OUTPUT
        echo "project_id=${PROJECT_ID}" >> $GITHUB_OUTPUT

        # Verify required secrets
        if [[ -z "$WORKLOAD_IDENTITY_PROVIDER" ]] || [[ -z "$SERVICE_ACCOUNT" ]] || [[ -z "$PROJECT_ID" ]]; then
          echo "Error: Required secrets are missing. Please ensure all secrets are created in Secret Manager."
          exit 1
        fi

    # Re-authenticate with fetched credentials
    - name: 'Re-Auth to GCP with Secret Manager values'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: '${{ steps.secrets.outputs.workload_identity_provider }}'
        service_account: '${{ steps.secrets.outputs.service_account }}'

    - name: 'Test Secret Manager Access'
      run: |
        echo "Testing Secret Manager Access..."
        echo "Current project configuration:"
        gcloud config list project
        
        # Ensure project is set correctly
        gcloud config set project ${{ steps.secrets.outputs.project_id }}
        
        echo "Listing secrets..."
        gcloud secrets list --project=${{ steps.secrets.outputs.project_id }} --format="table(name,createTime)"
        
        # Test access to specific secrets
        echo "Testing access to specific secrets..."
        for secret in "github_workload_identity_provider" "github_service_account" "project_id"; do
          echo "Testing access to $secret..."
          if gcloud secrets versions access latest --secret="$secret" --project=${{ steps.secrets.outputs.project_id }} 2>/dev/null; then
            echo "✓ Successfully accessed $secret"
          else
            echo "✗ Failed to access $secret"
          fi
        done

    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v2

    - name: 'Terraform Init'
      run: |
        cd terraform-test
        terraform init

    - name: 'Import Existing Resources'
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform-test
        # Import service account
        terraform import google_service_account.workload_identity_sa projects/${{ steps.secrets.outputs.project_id }}/serviceAccounts/workload-identity-sa@${{ steps.secrets.outputs.project_id }}.iam.gserviceaccount.com
        
        # Import workload identity pool
        terraform import google_iam_workload_identity_pool.main projects/${{ steps.secrets.outputs.project_id }}/locations/global/workloadIdentityPools/github-actions-pool
        
        # Import workload identity provider
        terraform import google_iam_workload_identity_pool_provider.main projects/${{ steps.secrets.outputs.project_id }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider
        
        # Import IAM binding
        terraform import google_service_account_iam_binding.workload_identity_binding "projects/${{ steps.secrets.outputs.project_id }}/serviceAccounts/workload-identity-sa@${{ steps.secrets.outputs.project_id }}.iam.gserviceaccount.com roles/iam.workloadIdentityUser"

    - name: 'Terraform Format'
      run: |
        cd terraform-test
        terraform fmt
        terraform fmt -check

    - name: 'Terraform Plan'
      run: |
        cd terraform-test
        terraform plan

    - name: 'Terraform Apply'
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform-test
        terraform apply -auto-approve
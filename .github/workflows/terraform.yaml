name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Initial auth with minimal secrets
    - name: 'Initial Auth to GCP'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: '${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ secrets.INITIAL_SERVICE_ACCOUNT }}'
        token_format: 'access_token'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Debug Workload Identity Configuration'
      run: |
        echo "=== GitHub Context ==="
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        echo "Actor: ${{ github.actor }}"
        echo "Head Ref: ${{ github.head_ref }}"
        echo "Base Ref: ${{ github.base_ref }}"
        echo "Event Type: ${{ github.event.type }}"
        echo ""
        echo "=== Workload Identity Provider ==="
        WORKLOAD_IDENTITY_PROVIDER="${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}"
        echo "Provider: $WORKLOAD_IDENTITY_PROVIDER"
        echo ""
        echo "=== Service Account ==="
        echo "Service Account: ${{ secrets.INITIAL_SERVICE_ACCOUNT }}"
        echo ""
        echo "=== Current Authentication ==="
        gcloud auth list
        echo ""
        echo "=== Current Configuration ==="
        gcloud config list

    - name: 'Verify Initial Workload Identity'
      run: |
        echo "Attempting to verify workload identity provider..."
        WORKLOAD_IDENTITY_PROVIDER="${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}"
        if [[ -z "$WORKLOAD_IDENTITY_PROVIDER" ]]; then
          echo "Error: INITIAL_WORKLOAD_IDENTITY_PROVIDER secret is not set"
          exit 1
        fi
        echo "Workload Identity Provider format check:"
        if [[ "$WORKLOAD_IDENTITY_PROVIDER" =~ ^projects/[0-9]+/locations/[^/]+/workloadIdentityPools/[^/]+/providers/[^/]+$ ]]; then
          echo "✓ Format is correct"
        else
          echo "✗ Format is incorrect. Expected format: projects/{PROJECT_NUMBER}/locations/{LOCATION}/workloadIdentityPools/{POOL_ID}/providers/{PROVIDER_ID}"
          echo "Current value: $WORKLOAD_IDENTITY_PROVIDER"
          exit 1
        fi

        # Extract project ID from the workload identity provider
        PROJECT_ID=$(echo "$WORKLOAD_IDENTITY_PROVIDER" | cut -d'/' -f2)
        echo "Checking IAM permissions for project: $PROJECT_ID"
        
        # Check if we have the necessary permissions
        echo "Verifying IAM permissions..."
        if ! gcloud projects get-iam-policy "$PROJECT_ID" --flatten="bindings[].members" --format="table(bindings.role,bindings.members)" | grep -E "roles/iam.workloadIdentityPoolAdmin|roles/iam.workloadIdentityPoolViewer|roles/iam.admin"; then
          echo "Warning: Current account may not have sufficient permissions to view workload identity pools"
          echo "Required roles: roles/iam.workloadIdentityPoolAdmin, roles/iam.workloadIdentityPoolViewer, or roles/iam.admin"
          echo "Please ensure your account has one of these roles assigned"
        fi

        echo "Attempting to describe workload identity pool..."
        if ! gcloud iam workload-identity-pools describe "$WORKLOAD_IDENTITY_PROVIDER" --format="table(name,resourceName)"; then
          echo "Error: Failed to describe workload identity pool. This could be due to:"
          echo "1. Insufficient permissions on your Google Cloud account"
          echo "2. Workload identity pool doesn't exist"
          echo "3. The service account doesn't have the roles/iam.workloadIdentityUser role"
          echo ""
          echo "To fix this:"
          echo "1. Ensure you're using the correct Google Cloud account"
          echo "2. Verify you have one of these roles: roles/iam.workloadIdentityPoolAdmin, roles/iam.workloadIdentityPoolViewer, or roles/iam.admin"
          echo "3. Check that the workload identity pool exists in the specified project"
          echo ""
          echo "Current authentication status:"
          gcloud auth list
          echo "Current configuration:"
          gcloud config list
          exit 1
        fi

    # Fetch secrets from Secret Manager
    - name: 'Fetch GCP Secrets'
      id: secrets
      run: |
        echo "::add-mask::$(gcloud secrets versions access latest --secret=github_workload_identity_provider)"
        echo "WORKLOAD_IDENTITY_PROVIDER=$(gcloud secrets versions access latest --secret=github_workload_identity_provider)" >> $GITHUB_ENV
        echo "::add-mask::$(gcloud secrets versions access latest --secret=github_service_account)"
        echo "SERVICE_ACCOUNT=$(gcloud secrets versions access latest --secret=github_service_account)" >> $GITHUB_ENV
        echo "::add-mask::$(gcloud secrets versions access latest --secret=project_id)"
        echo "PROJECT_ID=$(gcloud secrets versions access latest --secret=project_id)" >> $GITHUB_ENV

    # Re-authenticate with fetched credentials
    - name: 'Re-Auth to GCP with Secret Manager values'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ env.SERVICE_ACCOUNT }}'

    - name: 'Test Secret Manager Access'
      run: |
        echo "Testing Secret Manager Access..."
        gcloud secrets list --project=${{ env.PROJECT_ID }}

    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v2

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Format'
      run: terraform fmt -check

    - name: 'Terraform Plan'
      run: terraform plan

    # Uncomment if you want to allow terraform apply on main branch
    # - name: 'Terraform Apply'
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: terraform apply -auto-approve

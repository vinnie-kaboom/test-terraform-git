name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, closed]  # Trigger on PR events including merge
    branches: [ "main" ]
  
permissions:
  contents: write  # Need write permission to commit state files
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ENCRYPTION_PASSWORD: ${{ secrets.ENCRYPTION_PASSWORD }}  # Add encryption password
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: 'Debug GitHub Context'
        run: |
          echo "=== GitHub Context Details ==="
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Head Ref: ${{ github.head_ref }}"
          echo "Base Ref: ${{ github.base_ref }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Repository Name: ${{ github.event.repository.name }}"
          echo "Repository Full Name: ${{ github.event.repository.full_name }}"
          echo "Default Branch: ${{ github.event.repository.default_branch }}"
          echo ""
          echo "=== Workload Identity Provider Format Check ==="
          WORKLOAD_IDENTITY_PROVIDER="${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}"
          if [[ -z "$WORKLOAD_IDENTITY_PROVIDER" ]]; then
            echo "Error: INITIAL_WORKLOAD_IDENTITY_PROVIDER secret is not set"
            exit 1
          fi
          echo "Provider Format: $WORKLOAD_IDENTITY_PROVIDER"
          if [[ "$WORKLOAD_IDENTITY_PROVIDER" =~ ^projects/[0-9]+/locations/[^/]+/workloadIdentityPools/[^/]+/providers/[^/]+$ ]]; then
            echo "✓ Provider format is correct"
          else
            echo "✗ Provider format is incorrect"
            echo "Expected format: projects/{PROJECT_NUMBER}/locations/{LOCATION}/workloadIdentityPools/{POOL_ID}/providers/{PROVIDER_ID}"
            exit 1
          fi

      - name: 'Install GPG'
        run: |
          sudo apt-get update
          sudo apt-get install -y gpg

      - name: 'Decrypt State File'
        run: |
          cd terraform-test
          # Decrypt state file if it exists
          if [[ -f terraform.tfstate.gpg ]]; then
            gpg --quiet --batch --yes --decrypt --passphrase="$ENCRYPTION_PASSWORD" \
                --output terraform.tfstate terraform.tfstate.gpg
          fi
          # Decrypt backup state file if it exists
          if [[ -f terraform.tfstate.backup.gpg ]]; then
            gpg --quiet --batch --yes --decrypt --passphrase="$ENCRYPTION_PASSWORD" \
                --output terraform.tfstate.backup terraform.tfstate.backup.gpg
          fi

      - name: 'Initial Auth to GCP'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: '${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.INITIAL_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
          create_credentials_file: true
          project_id: 'sylvan-apogee-450014-a6'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Verify Authentication'
        run: |
          echo "=== Authentication Status ==="
          gcloud auth list
          echo ""
          echo "=== Current Configuration ==="
          gcloud config list
          echo ""
          echo "=== Service Account Info ==="
          echo "Service Account: ${{ secrets.INITIAL_SERVICE_ACCOUNT }}"
          echo ""
          echo "=== Workload Identity Provider Info ==="
          WORKLOAD_IDENTITY_PROVIDER="${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}"
          # Set project ID explicitly before using it
          PROJECT_ID="sylvan-apogee-450014-a6"  # Temporarily hardcode until secrets are fetched
          gcloud config set project "$PROJECT_ID"
          
          LOCATION="global"
          POOL_ID="github-actions-pool"
          PROVIDER_ID="github-provider"
          
          echo "Project ID: $PROJECT_ID"
          echo "Location: $LOCATION"
          echo "Pool ID: $POOL_ID"
          echo "Provider ID: $PROVIDER_ID"
          echo "Full Provider: $WORKLOAD_IDENTITY_PROVIDER"
          echo ""
          echo "=== Verifying Workload Identity Pool ==="
          if ! gcloud iam workload-identity-pools describe "$POOL_ID" \
            --project="$PROJECT_ID" \
            --location="$LOCATION" \
            --format="table(name,resourceName)"; then
            echo "Error: Failed to describe workload identity pool"
            echo "This could mean:"
            echo "1. The pool doesn't exist"
            echo "2. You don't have permission to view it"
            echo "3. The project/location/pool ID is incorrect"
            exit 1
          fi
          echo ""
          echo "=== Verifying Workload Identity Provider ==="
          if ! gcloud iam workload-identity-pools providers describe "$PROVIDER_ID" \
            --project="$PROJECT_ID" \
            --location="$LOCATION" \
            --workload-identity-pool="$POOL_ID" \
            --format="table(name,resourceName,attributeCondition)"; then
            echo "Error: Failed to describe workload identity provider"
            echo "This could mean:"
            echo "1. The provider doesn't exist"
            echo "2. You don't have permission to view it"
            echo "3. The project/location/pool/provider IDs are incorrect"
            exit 1
          fi
          echo ""
          echo "=== Verifying Service Account Permissions ==="
          if ! gcloud projects get-iam-policy "$PROJECT_ID" \
            --flatten="bindings[].members" \
            --format="table(bindings.role,bindings.members)" | grep "${{ secrets.INITIAL_SERVICE_ACCOUNT }}"; then
            echo "Warning: Service account ${{ secrets.INITIAL_SERVICE_ACCOUNT }} not found in project IAM policy"
            echo "Make sure the service account has the roles/iam.workloadIdentityUser role"
          fi

      - name: 'Setup GCS Backend'
        run: |
          # Create the bucket if it doesn't exist
          if ! gsutil ls gs://sylvan-apogee-450014-a6-terraform-state > /dev/null 2>&1; then
            gsutil mb -p sylvan-apogee-450014-a6 gs://sylvan-apogee-450014-a6-terraform-state
            gsutil versioning set on gs://sylvan-apogee-450014-a6-terraform-state
          fi

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: 'Install GKE Auth Plugin'
        run: |
          # Install the GKE auth plugin
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
          
          # Verify installation
          gke-gcloud-auth-plugin --version

      - name: 'Terraform Init'
        run: |
          cd terraform-test
          # Set GOOGLE_APPLICATION_CREDENTIALS to the credentials file created by the auth action
          export GOOGLE_APPLICATION_CREDENTIALS="${{ env.GOOGLE_GHA_CREDS_PATH }}"
          terraform init -reconfigure

      - name: 'Generate SSH Key'
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          cat ~/.ssh/id_rsa.pub

      - name: 'Terraform Plan'
        run: |
          cd terraform-test
          terraform plan -lock=false \
            -var="support_email=${{ secrets.SUPPORT_EMAIL }}" \
            -var="iap_authorized_users=[\"user:${{ secrets.AUTHORIZED_USER }}\"]" \
            -var="github_repo=${{ github.repository }}" \
            -var="user_email=${{ secrets.AUTHORIZED_USER }}" \
            -var="ssh_user=ubuntu" \
            -var="ssh_pub_key_path=/home/runner/.ssh/id_rsa.pub"

      - name: 'Terraform Apply'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform-test
          terraform apply -auto-approve -lock=false \
            -var="support_email=${{ secrets.SUPPORT_EMAIL }}" \
            -var="iap_authorized_users=[\"user:${{ secrets.AUTHORIZED_USER }}\"]" \
            -var="github_repo=${{ github.repository }}" \
            -var="user_email=${{ secrets.AUTHORIZED_USER }}" \
            -var="ssh_user=ubuntu" \
            -var="ssh_pub_key_path=/home/runner/.ssh/id_rsa.pub"

      - name: 'Get Cluster Credentials'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Set project ID
          PROJECT_ID="sylvan-apogee-450014-a6"
          gcloud config set project $PROJECT_ID
          
          # Get cluster name and region from Terraform output
          cd terraform-test
          CLUSTER_NAME=$(terraform output -raw kubernetes_cluster_name)
          CLUSTER_REGION=$(terraform output -raw kubernetes_cluster_region)
          BASTION_NAME=$(terraform output -json connection_details | jq -r '.instance_name')
          BASTION_ZONE=$(terraform output -json connection_details | jq -r '.zone')
          
          # Get cluster credentials
          gcloud container clusters get-credentials $CLUSTER_NAME \
            --region $CLUSTER_REGION \
            --project $PROJECT_ID \
            --internal-ip
          
          # Set up kubectl to use the bastion as a proxy
          BASTION_IP=$(gcloud compute instances describe $BASTION_NAME \
            --zone=$BASTION_ZONE \
            --project=$PROJECT_ID \
            --format='get(networkInterfaces[0].networkIP)')
          
          # Update kubeconfig to use the bastion as a proxy
          kubectl config set-cluster gke_${PROJECT_ID}_${CLUSTER_REGION}_${CLUSTER_NAME} \
            --server=https://$BASTION_IP:6443 \
            --insecure-skip-tls-verify=true
          
          # Verify cluster access
          kubectl get nodes

      - name: 'Create ArgoCD Namespace'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform-test
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

      - name: 'Install ArgoCD'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform-test
          PROJECT_ID="sylvan-apogee-450014-a6"
          
          # Add ArgoCD Helm repository
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          
          # Install ArgoCD
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --version 5.51.4 \
            --set server.extraArgs[0]="--insecure" \
            --set server.config.url="https://argocd.$PROJECT_ID.svc.id.goog" \
            --set server.service.type="ClusterIP" \
            --set server.ingress.enabled=true \
            --set server.ingress.annotations."kubernetes\.io/ingress\.class"="nginx" \
            --set server.ingress.annotations."cert-manager\.io/cluster-issuer"="letsencrypt-prod" \
            --set server.ingress.hosts[0]="argocd.$PROJECT_ID.svc.id.goog" \
            --set server.ingress.tls[0].secretName="argocd-server-tls" \
            --set server.ingress.tls[0].hosts[0]="argocd.$PROJECT_ID.svc.id.goog" \
            --set configs.secret.argocdServerAdminPassword="$2a$10$mYaJ1yF9yF9yF9yF9yF9yO" \
            --set configs.cm.url="https://argocd.$PROJECT_ID.svc.id.goog" \
            --set repoServer.serviceAccount.create=true \
            --set repoServer.serviceAccount.name="argocd-repo-server" \
            --set applicationSet.enabled=true \
            --set notifications.enabled=true

      - name: 'Verify Secrets'
        run: |
          echo "Checking required secrets..."
          
          check_secret() {
            local secret_name=$1
            local secret_value=$2
            if [[ -z "$secret_value" ]]; then
              echo "✗ $secret_name is not set"
              return 1
            else
              echo "✓ $secret_name is set"
              return 0
            fi
          }
          
          errors=0
          
          check_secret "ENCRYPTION_PASSWORD" "${{ secrets.ENCRYPTION_PASSWORD }}" || ((errors++))
          check_secret "INITIAL_WORKLOAD_IDENTITY_PROVIDER" "${{ secrets.INITIAL_WORKLOAD_IDENTITY_PROVIDER }}" || ((errors++))
          check_secret "INITIAL_SERVICE_ACCOUNT" "${{ secrets.INITIAL_SERVICE_ACCOUNT }}" || ((errors++))
          check_secret "AUTHORIZED_USER" "${{ secrets.AUTHORIZED_USER }}" || ((errors++))
          check_secret "SUPPORT_EMAIL" "${{ secrets.SUPPORT_EMAIL }}" || ((errors++))
          
          if [[ $errors -gt 0 ]]; then
            echo "Error: Missing required secrets"
            echo "Please add all required secrets in GitHub repository settings"
            echo "Settings -> Secrets and variables -> Actions -> New repository secret"
            exit 1
          fi

      - name: 'Cleanup'
        if: always()
        run: |
          cd terraform-test
          rm -rf .terraform/
          rm -f .terraform.lock.hcl
          echo "Cleanup completed"

      - name: Commit state file
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform-test
          if [[ -f terraform.tfstate ]]; then
            git config --global user.name 'GitHub Actions Bot'
            git config --global user.email 'actions@github.com'
            git add terraform.tfstate*
            git commit -m "Update Terraform state" || echo "No changes to commit"
            git push || echo "No changes to push"
          fi


